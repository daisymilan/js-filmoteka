{"mappings":"AAqBaA,SAASC,eAAe,eAuFrC,IAAIC,EArFJF,SAASG,iBAAiB,oBAAoB,WAC1C,MAAMC,EAAaJ,SAASC,eAAe,eACrCI,EAAWL,SAASC,eAAe,aACnCK,EAAkBN,SAASO,cAAc,YAC/C,IAAIC,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQ,mBAAqB,GACrEC,EAAeJ,KAAKC,MAAMC,aAAaC,QAAQ,iBAAmB,GAatEE,eAAeC,EAAaC,GACxBV,EAAgBW,UAAY,GAC5B,IAAK,MAAMC,KAAWF,EAClB,IACI,IAAKG,EAAeD,GAChB,MAAM,IAAIE,MAAM,qBAAqBF,KAEzC,MACMG,EAAeC,QADDC,EAAoBL,IAExCZ,EAAgBkB,YAAYH,E,CAEhC,MAAOI,GACmB,qBAAlBA,EAAMC,QACNC,QAAQC,KAAK,iBAAiBV,gBAE9BS,QAAQF,MAAM,2BAA4BA,E,EAO1DX,eAAeS,EAAoBL,GACnC,MAEMW,EAAM,sCAAqBX,6CAE3BY,QAAiBC,MAAMF,GAC7B,IAAKC,EAASE,GACV,MAAwB,MAApBF,EAASG,OACH,IAAIb,MAAM,oBAEV,IAAIA,MAAM,kCAAoCU,EAASI,YAIrE,aAD2BJ,EAASK,M,CAKpC,SAASb,EAAmBc,GAExB,MAMMC,EAAUrC,SAASsC,cAAc,OAWvC,OAVAD,EAAQE,UAAUC,IAAI,SACtBH,EAAQpB,UAAY,2BACJmB,EAAMK,YAzFd,kCAyFsCL,EAAMK,YAAc,gDAAgDL,EAAMM,4BAC9GN,EAAMM,2HAVE,CAAAC,IACd,MAAMC,EAAS,GAEf,OADAD,EAAOC,OAAOC,KAAIC,GAASF,EAAOG,KAAKD,EAAME,QACtCJ,CAAM,EASuCK,CAAUb,qBAAyBA,EAAMc,aAAaC,MAAM,EAAE,2DACrFf,EAAMgB,oEAIhCf,C,CAGX,SAASlB,EAAeD,GACpB,OAAQmC,MAAMnC,E,CA1ElBd,EAAWD,iBAAiB,SAAS,SAASmD,GAC1CA,EAAEC,iBACFxC,EAAaP,E,IAGjBH,EAASF,iBAAiB,SAAS,SAASmD,GACxCA,EAAEC,iBACFxC,EAAaF,E,OA6EjBX,EAhHYsD","sources":["src/js/library.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'api_key=b5e824a3d922f68ba211fcf6dbdcb6f5';\nconst API_URL = BASE_URL + '/discover/movie?sort_by-popularity.desc&' + API_KEY;\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst searchURL = BASE_URL + '/search/movie?' + API_KEY;\nconst getGenres = BASE_URL + '/genre/movie/list?' + API_KEY;\n\n\nconst options = {\n  params: {\n    key: API_KEY,\n    query: '',\n    include_adult: false,\n    language: 'en-US',\n    primary_release_year: '',\n    page: 1,\n    region: '',\n    year: '',\n  },\n};\n\nconst form = document.getElementById('lib-buttons');\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    const watchedBtn = document.getElementById('watched-btn');\n    const queueBtn = document.getElementById('queue-btn')\n    const moviesContainer = document.querySelector('.gallery');\n    let watchedMovies = JSON.parse(localStorage.getItem('movie-watched')) || [];\n    let queuedMovies = JSON.parse(localStorage.getItem('movie-queue')) || [];\n\n    watchedBtn.addEventListener('click', function(e) {\n        e.preventDefault();\n        getLibMovies(watchedMovies);\n    });\n\n    queueBtn.addEventListener('click', function(e) {\n        e.preventDefault();\n        getLibMovies(queuedMovies);\n    });\n\n    //Load movies whose IDs matched with those in localStorage\n    async function getLibMovies(array) {\n        moviesContainer.innerHTML = ''; \n        for (const movieId of array) {\n            try {\n                if (!isValidMovieId(movieId)) {\n                    throw new Error(`Invalid movie ID: ${movieId}`);\n                }\n                const movie = await getMovieDetailsById(movieId);\n                const movieElement = createMovieElement(movie);\n                moviesContainer.appendChild(movieElement);\n    } \n            catch (error) {\n                if (error.message === 'Movie not found.') {\n                    console.warn(`Movie with ID ${movieId} not found.`);\n                } else {\n                    console.error('Failed to display movie:', error);\n                }\n            }\n        }\n    }\n\n    //Requesting movies using IDs\n    async function getMovieDetailsById(movieId) {\n    const API_KEY = \"b5e824a3d922f68ba211fcf6dbdcb6f5\";\n    const BASE_URL = 'https://api.themoviedb.org/3';\n    const url = `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`;\n\n    const response = await fetch(url);\n    if (!response.ok) {\n        if (response.status === 404) {\n            throw new Error('Movie not found.');\n        } else {\n            throw new Error('Failed to fetch movie details: ' + response.statusText);\n        }\n    }\n    const movieDetails = await response.json();\n    return movieDetails;\n}\n\n    //Creation of single movie display\n    function createMovieElement(movie) {\n        // fetching genre list\n        const genreList = movies => {\n            const genres = [];\n            movies.genres.map(genre => genres.push(genre.name));\n            return genres;\n        }\n\n        const element = document.createElement('div');\n        element.classList.add('movie');\n        element.innerHTML = `\n            <img src=\"${movie.poster_path ? IMG_URL + movie.poster_path : 'http://via.placeholder.com/1080x1500'}\" alt=\"${movie.title}\">\n            <h3>${movie.title}</h3> \n            <div class=\"lib-movie-details\">\n                <div class=\"lib-info\"><span class=\"lib-genre\">${genreList(movie)}</span> | <span>${movie.release_date.slice(0,4)}</span></div>\n                <div><span class=\"avg\">${movie.vote_average}</span></div>\n            </div>          \n        `;\n\n        return element;\n    }\n\n    function isValidMovieId(movieId) {\n        return !isNaN(movieId);\n    }\n});\n\nlet lastUrl;\n\ngetMovies(API_URL);\n\n// DISPLAY MOVIE CARDS\nfunction getMovies(url) {\n    lastUrl = url;\n}\n\nfunction openModalFromLibrary() {\n    openModal();\n}"],"names":["document","getElementById","$1cafa503bc57b7a0$var$lastUrl","addEventListener","watchedBtn","queueBtn","moviesContainer","querySelector","watchedMovies","JSON","parse","localStorage","getItem","queuedMovies","async","getLibMovies","array","innerHTML","movieId","isValidMovieId","Error","movieElement","createMovieElement","getMovieDetailsById","appendChild","error","message","console","warn","url","response","fetch","ok","status","statusText","json","movie","element","createElement","classList","add","poster_path","title","movies","genres","map","genre","push","name","genreList","release_date","slice","vote_average","isNaN","e","preventDefault","$1cafa503bc57b7a0$var$BASE_URL"],"version":3,"file":"library.19ec30c4.js.map"}